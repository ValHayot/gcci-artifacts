Requirement already satisfied: psutil<=7.0.0,>=5.9 in /home/x-vhayot/miniconda3/envs/psij/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements.txt (line 1)) (5.9.8)
Requirement already satisfied: pystache>=0.6.0 in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements.txt (line 2)) (0.6.8)
Requirement already satisfied: typeguard>=3.0.1 in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements.txt (line 3)) (4.4.2)
Requirement already satisfied: packaging<=24.2,>=24.0 in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements.txt (line 4)) (24.2)
Requirement already satisfied: radical.utils in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-connector-radical.txt (line 1)) (1.100.0)
Requirement already satisfied: radical.pilot in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-connector-radical.txt (line 2)) (1.100.0)
Requirement already satisfied: six in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 9)) (1.17.0)
Requirement already satisfied: Sphinx==4.5.0 in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 10)) (4.5.0)
Requirement already satisfied: sphinx_rtd_theme in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 11)) (1.3.0)
Requirement already satisfied: sphinx-tabs==3.2.0 in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 12)) (3.2.0)
Requirement already satisfied: sphinx-multiversion in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 13)) (0.2.4)
Requirement already satisfied: sphinxcontrib-applehelp==1.0.4 in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 18)) (1.0.4)
Requirement already satisfied: sphinxcontrib-devhelp==1.0.2 in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 19)) (1.0.2)
Requirement already satisfied: sphinxcontrib-htmlhelp==2.0.1 in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 20)) (2.0.1)
Requirement already satisfied: sphinxcontrib-serializinghtml==1.1.5 in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 21)) (1.1.5)
Requirement already satisfied: sphinxcontrib-qthelp==1.0.3 in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 22)) (1.0.3)
Requirement already satisfied: cloud_sptheme==1.10.1.post20200504175005 in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 25)) (1.10.1.post20200504175005)
Requirement already satisfied: pytest>=6.2.0 in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-tests.txt (line 6)) (8.3.5)
Requirement already satisfied: requests>=2.25.1 in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-tests.txt (line 7)) (2.32.3)
Requirement already satisfied: pytest-cov in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-tests.txt (line 8)) (6.1.1)
Requirement already satisfied: pytest-timeout in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-tests.txt (line 9)) (2.3.1)
Requirement already satisfied: filelock<3.18,>=3.4 in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-tests.txt (line 10)) (3.17.0)
Requirement already satisfied: mypy>=0.931 in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r requirements-dev.txt (line 9)) (1.15.0)
Requirement already satisfied: flake8 in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r requirements-dev.txt (line 10)) (7.2.0)
Requirement already satisfied: flake8-docstrings in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r requirements-dev.txt (line 11)) (1.7.0)
Requirement already satisfied: autopep8 in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r requirements-dev.txt (line 12)) (2.3.2)
Requirement already satisfied: types-requests in /home/x-vhayot/.local/lib/python3.12/site-packages (from -r requirements-dev.txt (line 13)) (2.32.0.20250328)
Requirement already satisfied: sphinxcontrib-jsmath in /home/x-vhayot/.local/lib/python3.12/site-packages (from Sphinx==4.5.0->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 10)) (1.0.1)
Requirement already satisfied: Jinja2>=2.3 in /home/x-vhayot/.local/lib/python3.12/site-packages (from Sphinx==4.5.0->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 10)) (3.1.6)
Requirement already satisfied: Pygments>=2.0 in /home/x-vhayot/.local/lib/python3.12/site-packages (from Sphinx==4.5.0->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 10)) (2.19.1)
Requirement already satisfied: docutils<0.18,>=0.14 in /home/x-vhayot/.local/lib/python3.12/site-packages (from Sphinx==4.5.0->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 10)) (0.16)
Requirement already satisfied: snowballstemmer>=1.1 in /home/x-vhayot/.local/lib/python3.12/site-packages (from Sphinx==4.5.0->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 10)) (2.2.0)
Requirement already satisfied: babel>=1.3 in /home/x-vhayot/.local/lib/python3.12/site-packages (from Sphinx==4.5.0->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 10)) (2.17.0)
Requirement already satisfied: alabaster<0.8,>=0.7 in /home/x-vhayot/.local/lib/python3.12/site-packages (from Sphinx==4.5.0->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 10)) (0.7.16)
Requirement already satisfied: imagesize in /home/x-vhayot/.local/lib/python3.12/site-packages (from Sphinx==4.5.0->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 10)) (1.4.1)
Requirement already satisfied: typing_extensions>=4.10.0 in /home/x-vhayot/.local/lib/python3.12/site-packages (from typeguard>=3.0.1->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements.txt (line 3)) (4.13.2)
Requirement already satisfied: colorama in /home/x-vhayot/.local/lib/python3.12/site-packages (from radical.utils->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-connector-radical.txt (line 1)) (0.4.6)
Requirement already satisfied: msgpack in /home/x-vhayot/.local/lib/python3.12/site-packages (from radical.utils->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-connector-radical.txt (line 1)) (1.1.0)
Requirement already satisfied: netifaces in /home/x-vhayot/.local/lib/python3.12/site-packages (from radical.utils->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-connector-radical.txt (line 1)) (0.11.0)
Requirement already satisfied: ntplib in /home/x-vhayot/.local/lib/python3.12/site-packages (from radical.utils->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-connector-radical.txt (line 1)) (0.4.0)
Requirement already satisfied: pyzmq in /home/x-vhayot/miniconda3/envs/psij/lib/python3.12/site-packages (from radical.utils->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-connector-radical.txt (line 1)) (26.1.0)
Requirement already satisfied: regex in /home/x-vhayot/.local/lib/python3.12/site-packages (from radical.utils->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-connector-radical.txt (line 1)) (2024.11.6)
Requirement already satisfied: setproctitle in /home/x-vhayot/.local/lib/python3.12/site-packages (from radical.utils->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-connector-radical.txt (line 1)) (1.3.5)
Requirement already satisfied: radical.gtod<1.110,>=1.100.0 in /home/x-vhayot/.local/lib/python3.12/site-packages (from radical.pilot->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-connector-radical.txt (line 2)) (1.100.1)
Requirement already satisfied: psij-python in /home/x-vhayot/.local/lib/python3.12/site-packages (from radical.pilot->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-connector-radical.txt (line 2)) (0.9.9)
Requirement already satisfied: dill in /home/x-vhayot/.local/lib/python3.12/site-packages (from radical.pilot->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-connector-radical.txt (line 2)) (0.3.9)
Requirement already satisfied: sphinxcontrib-jquery<5,>=4 in /home/x-vhayot/.local/lib/python3.12/site-packages (from sphinx_rtd_theme->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 11)) (4.1)
Requirement already satisfied: iniconfig in /home/x-vhayot/.local/lib/python3.12/site-packages (from pytest>=6.2.0->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-tests.txt (line 6)) (2.1.0)
Requirement already satisfied: pluggy<2,>=1.5 in /home/x-vhayot/.local/lib/python3.12/site-packages (from pytest>=6.2.0->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-tests.txt (line 6)) (1.5.0)
Requirement already satisfied: charset-normalizer<4,>=2 in /home/x-vhayot/.local/lib/python3.12/site-packages (from requests>=2.25.1->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-tests.txt (line 7)) (3.4.1)
Requirement already satisfied: idna<4,>=2.5 in /home/x-vhayot/.local/lib/python3.12/site-packages (from requests>=2.25.1->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-tests.txt (line 7)) (3.10)
Requirement already satisfied: urllib3<3,>=1.21.1 in /home/x-vhayot/.local/lib/python3.12/site-packages (from requests>=2.25.1->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-tests.txt (line 7)) (2.4.0)
Requirement already satisfied: certifi>=2017.4.17 in /home/x-vhayot/.local/lib/python3.12/site-packages (from requests>=2.25.1->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-tests.txt (line 7)) (2025.1.31)
Requirement already satisfied: coverage>=7.5 in /home/x-vhayot/.local/lib/python3.12/site-packages (from coverage[toml]>=7.5->pytest-cov->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-tests.txt (line 8)) (7.8.0)
Requirement already satisfied: mypy_extensions>=1.0.0 in /home/x-vhayot/.local/lib/python3.12/site-packages (from mypy>=0.931->-r requirements-dev.txt (line 9)) (1.0.0)
Requirement already satisfied: mccabe<0.8.0,>=0.7.0 in /home/x-vhayot/.local/lib/python3.12/site-packages (from flake8->-r requirements-dev.txt (line 10)) (0.7.0)
Requirement already satisfied: pycodestyle<2.14.0,>=2.13.0 in /home/x-vhayot/.local/lib/python3.12/site-packages (from flake8->-r requirements-dev.txt (line 10)) (2.13.0)
Requirement already satisfied: pyflakes<3.4.0,>=3.3.0 in /home/x-vhayot/.local/lib/python3.12/site-packages (from flake8->-r requirements-dev.txt (line 10)) (3.3.2)
Requirement already satisfied: pydocstyle>=2.1 in /home/x-vhayot/.local/lib/python3.12/site-packages (from flake8-docstrings->-r requirements-dev.txt (line 11)) (6.3.0)
Requirement already satisfied: MarkupSafe>=2.0 in /home/x-vhayot/.local/lib/python3.12/site-packages (from Jinja2>=2.3->Sphinx==4.5.0->-r /anvil/scratch/x-vhayot/gc-action-temp/psij-python/requirements-docs.txt (line 10)) (3.0.2)
============================= test session starts ==============================
platform linux -- Python 3.12.0, pytest-8.3.5, pluggy-1.5.0
rootdir: /anvil/scratch/x-vhayot/gc-action-temp/psij-python
plugins: cov-6.1.1, typeguard-4.4.2, timeout-2.3.1
collected 189 items

tests/getting_started/test_simple_example.py ..FFF...                    [  4%]
tests/test_callbacks.py ..                                               [  5%]
tests/test_doc_examples.py ...                                           [  6%]
tests/test_executor.py ..FFF.....FFF.....FFF.....FFF.....FFF.....FFF.... [ 32%]
.FFF.....FFF.....FFF.....FFF.....FFF.....FFF.........                    [ 60%]
tests/test_executor_loading.py FFFF                                      [ 62%]
tests/test_executor_versions.py .                                        [ 63%]
tests/test_infrastructure.py ..                                          [ 64%]
tests/test_issue_387_1.py .                                              [ 65%]
tests/test_issue_387_2.py .                                              [ 65%]
tests/test_issue_387_3.py .                                              [ 66%]
tests/test_issue_435.py ..FFF...                                         [ 70%]
tests/test_job_spec.py ..                                                [ 71%]
tests/test_mpi.py ssssssss                                               [ 75%]
tests/test_nodefile.py s.sFFs..                                          [ 79%]
tests/test_resources.py ..ssssFss.                                       [ 85%]
tests/test_serialization.py .                                            [ 85%]
tests/user_guide/test_attach.py .                                        [ 86%]
tests/user_guide/test_doc_callbacks.py .                                 [ 86%]
tests/user_guide/test_environment.py .                                   [ 87%]
tests/user_guide/test_job_arguments.py .                                 [ 87%]
tests/user_guide/test_job_wait.py .                                      [ 88%]
tests/user_guide/test_job_wait_active.py .                               [ 88%]
tests/user_guide/test_multiple_jobs.py .                                 [ 89%]
tests/user_guide/test_plain_job.py .                                     [ 89%]
tests/user_guide/test_prelaunch.py .                                     [ 90%]
tests/user_guide/test_redirect.py F                                      [ 91%]
tests/user_guide/test_resourcespec.py ..FFF...                           [ 95%]
tests/user_guide/test_scheduling_information.py ..FFF...                 [ 99%]
tests/user_guide/test_simple_job_with_props.py .                         [100%]

=================================== FAILURES ===================================
______________ test_getting_started_single_job[batch-test:single] ______________

execparams = batch-test:single

    def test_getting_started_single_job(execparams: ExecutorTestParams) -> None:
        from psij import Job, JobSpec
    
        job = Job(JobSpec(executable="/bin/date"))
>       ex = _get_executor_instance(execparams, job)

tests/getting_started/test_simple_example.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 21:59:18 DEBUG New Job: Job[id=8c4030a8-1742-4477-84ad-0a6cce3e3ae4, native_id=None, executor=None, status=JobStatus[NEW, time=1752631158.5575864]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=8c4030a8-1742-4477-84ad-0a6cce3e3ae4, native_id=None, executor=None, status=JobStatus[NEW, time=1752631158.5575864]]
_____________ test_getting_started_single_job[batch-test:multiple] _____________

execparams = batch-test:multiple

    def test_getting_started_single_job(execparams: ExecutorTestParams) -> None:
        from psij import Job, JobSpec
    
        job = Job(JobSpec(executable="/bin/date"))
>       ex = _get_executor_instance(execparams, job)

tests/getting_started/test_simple_example.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 21:59:18 DEBUG New Job: Job[id=52650fe9-e40f-4ee8-8eff-744a8a19f895, native_id=None, executor=None, status=JobStatus[NEW, time=1752631158.643241]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=52650fe9-e40f-4ee8-8eff-744a8a19f895, native_id=None, executor=None, status=JobStatus[NEW, time=1752631158.643241]]
____________ test_getting_started_single_job[batch-test:batch-test] ____________

execparams = batch-test:batch-test

    def test_getting_started_single_job(execparams: ExecutorTestParams) -> None:
        from psij import Job, JobSpec
    
        job = Job(JobSpec(executable="/bin/date"))
>       ex = _get_executor_instance(execparams, job)

tests/getting_started/test_simple_example.py:10: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 21:59:18 DEBUG New Job: Job[id=b68a02d8-3963-4ded-804d-2ef0ec2af513, native_id=None, executor=None, status=JobStatus[NEW, time=1752631158.6523964]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=b68a02d8-3963-4ded-804d-2ef0ec2af513, native_id=None, executor=None, status=JobStatus[NEW, time=1752631158.6523964]]
______________________ test_simple_job[batch-test:single] ______________________

execparams = batch-test:single

    def test_simple_job(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/date', launcher=execparams.launcher))
>       ex = _get_executor_instance(execparams, job)

tests/test_executor.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 22:29:01 DEBUG New Job: Job[id=deb8e929-4a0f-41c1-8893-6353ca340084, native_id=None, executor=None, status=JobStatus[NEW, time=1752632941.5087051]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=deb8e929-4a0f-41c1-8893-6353ca340084, native_id=None, executor=None, status=JobStatus[NEW, time=1752632941.5087051]]
_____________________ test_simple_job[batch-test:multiple] _____________________

execparams = batch-test:multiple

    def test_simple_job(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/date', launcher=execparams.launcher))
>       ex = _get_executor_instance(execparams, job)

tests/test_executor.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 22:29:01 DEBUG New Job: Job[id=5fd8e88d-c320-4c56-9949-6b56d056b5c4, native_id=None, executor=None, status=JobStatus[NEW, time=1752632941.5270286]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=5fd8e88d-c320-4c56-9949-6b56d056b5c4, native_id=None, executor=None, status=JobStatus[NEW, time=1752632941.5270286]]
____________________ test_simple_job[batch-test:batch-test] ____________________

execparams = batch-test:batch-test

    def test_simple_job(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/date', launcher=execparams.launcher))
>       ex = _get_executor_instance(execparams, job)

tests/test_executor.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 22:29:01 DEBUG New Job: Job[id=479b258e-1b3a-45c7-80be-8abdb25be8f4, native_id=None, executor=None, status=JobStatus[NEW, time=1752632941.538705]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=479b258e-1b3a-45c7-80be-8abdb25be8f4, native_id=None, executor=None, status=JobStatus[NEW, time=1752632941.538705]]
_________________ test_simple_job_redirect[batch-test:single] __________________

execparams = batch-test:single

    def test_simple_job_redirect(execparams: ExecutorTestParams) -> None:
        _make_test_dir()
        with TemporaryDirectory(dir=Path.home() / '.psij' / 'test') as td:
            outp = Path(td, 'stdout.txt')
            job = Job(JobSpec(executable='/bin/echo', arguments=['-n', '_x_'], stdout_path=outp))
>           ex = _get_executor_instance(execparams, job)

tests/test_executor.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 22:36:12 DEBUG New Job: Job[id=03bc813a-c1a9-4b5e-bdd5-18582b2cbd1d, native_id=None, executor=None, status=JobStatus[NEW, time=1752633372.057011]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=03bc813a-c1a9-4b5e-bdd5-18582b2cbd1d, native_id=None, executor=None, status=JobStatus[NEW, time=1752633372.057011]]
________________ test_simple_job_redirect[batch-test:multiple] _________________

execparams = batch-test:multiple

    def test_simple_job_redirect(execparams: ExecutorTestParams) -> None:
        _make_test_dir()
        with TemporaryDirectory(dir=Path.home() / '.psij' / 'test') as td:
            outp = Path(td, 'stdout.txt')
            job = Job(JobSpec(executable='/bin/echo', arguments=['-n', '_x_'], stdout_path=outp))
>           ex = _get_executor_instance(execparams, job)

tests/test_executor.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 22:36:12 DEBUG New Job: Job[id=5e4cce16-86ea-4a47-8aa3-4814207e1f97, native_id=None, executor=None, status=JobStatus[NEW, time=1752633372.0726101]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=5e4cce16-86ea-4a47-8aa3-4814207e1f97, native_id=None, executor=None, status=JobStatus[NEW, time=1752633372.0726101]]
_______________ test_simple_job_redirect[batch-test:batch-test] ________________

execparams = batch-test:batch-test

    def test_simple_job_redirect(execparams: ExecutorTestParams) -> None:
        _make_test_dir()
        with TemporaryDirectory(dir=Path.home() / '.psij' / 'test') as td:
            outp = Path(td, 'stdout.txt')
            job = Job(JobSpec(executable='/bin/echo', arguments=['-n', '_x_'], stdout_path=outp))
>           ex = _get_executor_instance(execparams, job)

tests/test_executor.py:29: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 22:36:12 DEBUG New Job: Job[id=9bf71ef9-67fe-4d5f-b43e-3fbc123ee766, native_id=None, executor=None, status=JobStatus[NEW, time=1752633372.0847616]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=9bf71ef9-67fe-4d5f-b43e-3fbc123ee766, native_id=None, executor=None, status=JobStatus[NEW, time=1752633372.0847616]]
___________________ test_stderr_redirect[batch-test:single] ____________________

execparams = batch-test:single

    def test_stderr_redirect(execparams: ExecutorTestParams) -> None:
        _make_test_dir()
        with TemporaryDirectory(dir=Path.home() / '.psij' / 'test') as td:
            outp = Path(td, 'stderr.txt')
            job = Job(JobSpec(executable='/bin/bash', arguments=['-c', 'echo -n _x_ 1>&2'],
                              stderr_path=outp))
>           ex = _get_executor_instance(execparams, job)

tests/test_executor.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 22:43:19 DEBUG New Job: Job[id=ed7b5145-dd7b-48b7-8ba6-68878856c78a, native_id=None, executor=None, status=JobStatus[NEW, time=1752633799.900064]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=ed7b5145-dd7b-48b7-8ba6-68878856c78a, native_id=None, executor=None, status=JobStatus[NEW, time=1752633799.900064]]
__________________ test_stderr_redirect[batch-test:multiple] ___________________

execparams = batch-test:multiple

    def test_stderr_redirect(execparams: ExecutorTestParams) -> None:
        _make_test_dir()
        with TemporaryDirectory(dir=Path.home() / '.psij' / 'test') as td:
            outp = Path(td, 'stderr.txt')
            job = Job(JobSpec(executable='/bin/bash', arguments=['-c', 'echo -n _x_ 1>&2'],
                              stderr_path=outp))
>           ex = _get_executor_instance(execparams, job)

tests/test_executor.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 22:43:19 DEBUG New Job: Job[id=048fe62f-b995-41be-a745-85534c4e81e3, native_id=None, executor=None, status=JobStatus[NEW, time=1752633799.923282]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=048fe62f-b995-41be-a745-85534c4e81e3, native_id=None, executor=None, status=JobStatus[NEW, time=1752633799.923282]]
_________________ test_stderr_redirect[batch-test:batch-test] __________________

execparams = batch-test:batch-test

    def test_stderr_redirect(execparams: ExecutorTestParams) -> None:
        _make_test_dir()
        with TemporaryDirectory(dir=Path.home() / '.psij' / 'test') as td:
            outp = Path(td, 'stderr.txt')
            job = Job(JobSpec(executable='/bin/bash', arguments=['-c', 'echo -n _x_ 1>&2'],
                              stderr_path=outp))
>           ex = _get_executor_instance(execparams, job)

tests/test_executor.py:45: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 22:43:19 DEBUG New Job: Job[id=319beb08-b35b-4652-ac9c-a5dc20f0b7e2, native_id=None, executor=None, status=JobStatus[NEW, time=1752633799.9423199]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=319beb08-b35b-4652-ac9c-a5dc20f0b7e2, native_id=None, executor=None, status=JobStatus[NEW, time=1752633799.9423199]]
________________________ test_attach[batch-test:single] ________________________

execparams = batch-test:single

    def test_attach(execparams: ExecutorTestParams) -> None:
        job1 = Job(JobSpec(executable='/bin/sleep', arguments=['1']))
>       ex = _get_executor_instance(execparams, job1)

tests/test_executor.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 22:52:31 DEBUG New Job: Job[id=3810f509-08e5-4374-8bd8-7c7f16499e6f, native_id=None, executor=None, status=JobStatus[NEW, time=1752634351.0956554]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=3810f509-08e5-4374-8bd8-7c7f16499e6f, native_id=None, executor=None, status=JobStatus[NEW, time=1752634351.0956554]]
_______________________ test_attach[batch-test:multiple] _______________________

execparams = batch-test:multiple

    def test_attach(execparams: ExecutorTestParams) -> None:
        job1 = Job(JobSpec(executable='/bin/sleep', arguments=['1']))
>       ex = _get_executor_instance(execparams, job1)

tests/test_executor.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 22:52:31 DEBUG New Job: Job[id=055a57b8-7370-4380-9e2f-8a94ca93fe26, native_id=None, executor=None, status=JobStatus[NEW, time=1752634351.1108062]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=055a57b8-7370-4380-9e2f-8a94ca93fe26, native_id=None, executor=None, status=JobStatus[NEW, time=1752634351.1108062]]
______________________ test_attach[batch-test:batch-test] ______________________

execparams = batch-test:batch-test

    def test_attach(execparams: ExecutorTestParams) -> None:
        job1 = Job(JobSpec(executable='/bin/sleep', arguments=['1']))
>       ex = _get_executor_instance(execparams, job1)

tests/test_executor.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 22:52:31 DEBUG New Job: Job[id=9072ef06-1374-4582-b5ee-5e84b894ae5d, native_id=None, executor=None, status=JobStatus[NEW, time=1752634351.1216922]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=9072ef06-1374-4582-b5ee-5e84b894ae5d, native_id=None, executor=None, status=JobStatus[NEW, time=1752634351.1216922]]
_______________________ test_attach2[batch-test:single] ________________________

execparams = batch-test:single

    def test_attach2(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/sleep', arguments=['1']))
>       ex = _get_executor_instance(execparams, job)

tests/test_executor.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 22:59:42 DEBUG New Job: Job[id=3c21408e-7fc1-4bbd-b324-dcacdcef1f8d, native_id=None, executor=None, status=JobStatus[NEW, time=1752634782.6214082]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=3c21408e-7fc1-4bbd-b324-dcacdcef1f8d, native_id=None, executor=None, status=JobStatus[NEW, time=1752634782.6214082]]
______________________ test_attach2[batch-test:multiple] _______________________

execparams = batch-test:multiple

    def test_attach2(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/sleep', arguments=['1']))
>       ex = _get_executor_instance(execparams, job)

tests/test_executor.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 22:59:42 DEBUG New Job: Job[id=e2adb5e7-ae5d-4040-8403-006b0c2f7d1e, native_id=None, executor=None, status=JobStatus[NEW, time=1752634782.637346]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=e2adb5e7-ae5d-4040-8403-006b0c2f7d1e, native_id=None, executor=None, status=JobStatus[NEW, time=1752634782.637346]]
_____________________ test_attach2[batch-test:batch-test] ______________________

execparams = batch-test:batch-test

    def test_attach2(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/sleep', arguments=['1']))
>       ex = _get_executor_instance(execparams, job)

tests/test_executor.py:73: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 22:59:42 DEBUG New Job: Job[id=7971e42d-ee3d-4c1a-8f27-17a555b7002d, native_id=None, executor=None, status=JobStatus[NEW, time=1752634782.6485293]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=7971e42d-ee3d-4c1a-8f27-17a555b7002d, native_id=None, executor=None, status=JobStatus[NEW, time=1752634782.6485293]]
________________________ test_cancel[batch-test:single] ________________________

execparams = batch-test:single

    def test_cancel(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/sleep', arguments=['60']))
>       ex = _get_executor_instance(execparams, job)

tests/test_executor.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:06:28 DEBUG New Job: Job[id=d016d54f-8cb0-4ade-94f3-fffc5de96b39, native_id=None, executor=None, status=JobStatus[NEW, time=1752635188.4399068]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=d016d54f-8cb0-4ade-94f3-fffc5de96b39, native_id=None, executor=None, status=JobStatus[NEW, time=1752635188.4399068]]
_______________________ test_cancel[batch-test:multiple] _______________________

execparams = batch-test:multiple

    def test_cancel(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/sleep', arguments=['60']))
>       ex = _get_executor_instance(execparams, job)

tests/test_executor.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:06:28 DEBUG New Job: Job[id=4901bc23-4f8c-472c-a01b-159e86285077, native_id=None, executor=None, status=JobStatus[NEW, time=1752635188.4900584]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=4901bc23-4f8c-472c-a01b-159e86285077, native_id=None, executor=None, status=JobStatus[NEW, time=1752635188.4900584]]
______________________ test_cancel[batch-test:batch-test] ______________________

execparams = batch-test:batch-test

    def test_cancel(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/sleep', arguments=['60']))
>       ex = _get_executor_instance(execparams, job)

tests/test_executor.py:88: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:06:28 DEBUG New Job: Job[id=df4f0a35-6359-4706-aea0-23d7ea4f2a97, native_id=None, executor=None, status=JobStatus[NEW, time=1752635188.5012248]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=df4f0a35-6359-4706-aea0-23d7ea4f2a97, native_id=None, executor=None, status=JobStatus[NEW, time=1752635188.5012248]]
_____________________ test_failing_job[batch-test:single] ______________________

execparams = batch-test:single

    def test_failing_job(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/false'))
>       ex = _get_executor_instance(execparams, job)

tests/test_executor.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:13:35 DEBUG New Job: Job[id=d349238c-94dd-4b23-8ec9-17222a1ba4b7, native_id=None, executor=None, status=JobStatus[NEW, time=1752635615.7908647]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=d349238c-94dd-4b23-8ec9-17222a1ba4b7, native_id=None, executor=None, status=JobStatus[NEW, time=1752635615.7908647]]
____________________ test_failing_job[batch-test:multiple] _____________________

execparams = batch-test:multiple

    def test_failing_job(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/false'))
>       ex = _get_executor_instance(execparams, job)

tests/test_executor.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:13:35 DEBUG New Job: Job[id=26db1e79-d37c-43aa-aa7a-eb84afcb3de2, native_id=None, executor=None, status=JobStatus[NEW, time=1752635615.8101664]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=26db1e79-d37c-43aa-aa7a-eb84afcb3de2, native_id=None, executor=None, status=JobStatus[NEW, time=1752635615.8101664]]
___________________ test_failing_job[batch-test:batch-test] ____________________

execparams = batch-test:batch-test

    def test_failing_job(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/false'))
>       ex = _get_executor_instance(execparams, job)

tests/test_executor.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:13:35 DEBUG New Job: Job[id=7254d851-4b0c-4cae-b831-ff52a385f94f, native_id=None, executor=None, status=JobStatus[NEW, time=1752635615.8214128]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=7254d851-4b0c-4cae-b831-ff52a385f94f, native_id=None, executor=None, status=JobStatus[NEW, time=1752635615.8214128]]
__________________ test_missing_executable[batch-test:single] __________________

execparams = batch-test:single

    def test_missing_executable(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/no_such_file_or_directory'))
>       ex = _get_executor_instance(execparams, job)

tests/test_executor.py:110: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:20:15 DEBUG New Job: Job[id=94c46c60-ab0f-4192-bce4-e0aa12373ce9, native_id=None, executor=None, status=JobStatus[NEW, time=1752636015.0587223]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=94c46c60-ab0f-4192-bce4-e0aa12373ce9, native_id=None, executor=None, status=JobStatus[NEW, time=1752636015.0587223]]
_________________ test_missing_executable[batch-test:multiple] _________________

execparams = batch-test:multiple

    def test_missing_executable(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/no_such_file_or_directory'))
>       ex = _get_executor_instance(execparams, job)

tests/test_executor.py:110: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:20:15 DEBUG New Job: Job[id=8b475649-169a-4a2b-99e1-35e566525a56, native_id=None, executor=None, status=JobStatus[NEW, time=1752636015.0735312]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=8b475649-169a-4a2b-99e1-35e566525a56, native_id=None, executor=None, status=JobStatus[NEW, time=1752636015.0735312]]
________________ test_missing_executable[batch-test:batch-test] ________________

execparams = batch-test:batch-test

    def test_missing_executable(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/no_such_file_or_directory'))
>       ex = _get_executor_instance(execparams, job)

tests/test_executor.py:110: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:20:15 DEBUG New Job: Job[id=b2107780-346a-4575-a5bf-f09fe9dcefee, native_id=None, executor=None, status=JobStatus[NEW, time=1752636015.0858452]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=b2107780-346a-4575-a5bf-f09fe9dcefee, native_id=None, executor=None, status=JobStatus[NEW, time=1752636015.0858452]]
____________________ test_parallel_jobs[batch-test:single] _____________________

execparams = batch-test:single

    def test_parallel_jobs(execparams: ExecutorTestParams) -> None:
        spec = JobSpec(executable='/bin/sleep', arguments=['5'])
        job1 = Job(spec)
        job2 = Job(spec)
>       ex = _get_executor_instance(execparams, job1)

tests/test_executor.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:27:01 DEBUG New Job: Job[id=633bd37a-8af3-46bd-933e-e93690d254e9, native_id=None, executor=None, status=JobStatus[NEW, time=1752636421.5551007]]
2025-07-15 23:27:01 DEBUG New Job: Job[id=b936278e-826c-4522-99a8-3f24cd35a32b, native_id=None, executor=None, status=JobStatus[NEW, time=1752636421.5552063]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=633bd37a-8af3-46bd-933e-e93690d254e9, native_id=None, executor=None, status=JobStatus[NEW, time=1752636421.5551007]]
DEBUG    psij.job:job.py:51 New Job: Job[id=b936278e-826c-4522-99a8-3f24cd35a32b, native_id=None, executor=None, status=JobStatus[NEW, time=1752636421.5552063]]
___________________ test_parallel_jobs[batch-test:multiple] ____________________

execparams = batch-test:multiple

    def test_parallel_jobs(execparams: ExecutorTestParams) -> None:
        spec = JobSpec(executable='/bin/sleep', arguments=['5'])
        job1 = Job(spec)
        job2 = Job(spec)
>       ex = _get_executor_instance(execparams, job1)

tests/test_executor.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:27:01 DEBUG New Job: Job[id=1a886ef4-38b8-484a-86cc-2545a210e769, native_id=None, executor=None, status=JobStatus[NEW, time=1752636421.5704997]]
2025-07-15 23:27:01 DEBUG New Job: Job[id=0421529c-b710-4b41-9472-fd889fbd98ae, native_id=None, executor=None, status=JobStatus[NEW, time=1752636421.5705938]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=1a886ef4-38b8-484a-86cc-2545a210e769, native_id=None, executor=None, status=JobStatus[NEW, time=1752636421.5704997]]
DEBUG    psij.job:job.py:51 New Job: Job[id=0421529c-b710-4b41-9472-fd889fbd98ae, native_id=None, executor=None, status=JobStatus[NEW, time=1752636421.5705938]]
__________________ test_parallel_jobs[batch-test:batch-test] ___________________

execparams = batch-test:batch-test

    def test_parallel_jobs(execparams: ExecutorTestParams) -> None:
        spec = JobSpec(executable='/bin/sleep', arguments=['5'])
        job1 = Job(spec)
        job2 = Job(spec)
>       ex = _get_executor_instance(execparams, job1)

tests/test_executor.py:128: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:27:01 DEBUG New Job: Job[id=1c9124c1-ca94-44a5-ad0b-0b9d428734db, native_id=None, executor=None, status=JobStatus[NEW, time=1752636421.582399]]
2025-07-15 23:27:01 DEBUG New Job: Job[id=b1782f08-7ad7-41f5-837c-ee053a2b57eb, native_id=None, executor=None, status=JobStatus[NEW, time=1752636421.5824854]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=1c9124c1-ca94-44a5-ad0b-0b9d428734db, native_id=None, executor=None, status=JobStatus[NEW, time=1752636421.582399]]
DEBUG    psij.job:job.py:51 New Job: Job[id=b1782f08-7ad7-41f5-837c-ee053a2b57eb, native_id=None, executor=None, status=JobStatus[NEW, time=1752636421.5824854]]
_______________________ test_env_var[batch-test:single] ________________________

execparams = batch-test:single

    def test_env_var(execparams: ExecutorTestParams) -> None:
        _make_test_dir()
        with TemporaryDirectory(dir=Path.home() / '.psij' / 'test') as td:
            outp = Path(td, 'stdout.txt')
            job = Job(JobSpec(executable='/bin/bash',
                              arguments=['-c', 'env > /tmp/t; echo -n $TEST_VAR$TEST_INT'],
                              stdout_path=outp))
            assert job.spec is not None
            job.spec.environment = {'TEST_INT': 1, 'TEST_VAR': '_y_'}  # type: ignore
>           ex = _get_executor_instance(execparams, job)

tests/test_executor.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:40:40 DEBUG New Job: Job[id=fd0a9fa6-2904-4da2-a080-89abc4b06e5f, native_id=None, executor=None, status=JobStatus[NEW, time=1752637240.9503217]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=fd0a9fa6-2904-4da2-a080-89abc4b06e5f, native_id=None, executor=None, status=JobStatus[NEW, time=1752637240.9503217]]
______________________ test_env_var[batch-test:multiple] _______________________

execparams = batch-test:multiple

    def test_env_var(execparams: ExecutorTestParams) -> None:
        _make_test_dir()
        with TemporaryDirectory(dir=Path.home() / '.psij' / 'test') as td:
            outp = Path(td, 'stdout.txt')
            job = Job(JobSpec(executable='/bin/bash',
                              arguments=['-c', 'env > /tmp/t; echo -n $TEST_VAR$TEST_INT'],
                              stdout_path=outp))
            assert job.spec is not None
            job.spec.environment = {'TEST_INT': 1, 'TEST_VAR': '_y_'}  # type: ignore
>           ex = _get_executor_instance(execparams, job)

tests/test_executor.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:40:40 DEBUG New Job: Job[id=14d9f9f3-2bd7-4b0a-acce-1c9fa7814b86, native_id=None, executor=None, status=JobStatus[NEW, time=1752637240.967895]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=14d9f9f3-2bd7-4b0a-acce-1c9fa7814b86, native_id=None, executor=None, status=JobStatus[NEW, time=1752637240.967895]]
_____________________ test_env_var[batch-test:batch-test] ______________________

execparams = batch-test:batch-test

    def test_env_var(execparams: ExecutorTestParams) -> None:
        _make_test_dir()
        with TemporaryDirectory(dir=Path.home() / '.psij' / 'test') as td:
            outp = Path(td, 'stdout.txt')
            job = Job(JobSpec(executable='/bin/bash',
                              arguments=['-c', 'env > /tmp/t; echo -n $TEST_VAR$TEST_INT'],
                              stdout_path=outp))
            assert job.spec is not None
            job.spec.environment = {'TEST_INT': 1, 'TEST_VAR': '_y_'}  # type: ignore
>           ex = _get_executor_instance(execparams, job)

tests/test_executor.py:146: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:40:40 DEBUG New Job: Job[id=7efb2516-dd1f-4410-a661-67b102aa11bb, native_id=None, executor=None, status=JobStatus[NEW, time=1752637240.982448]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=7efb2516-dd1f-4410-a661-67b102aa11bb, native_id=None, executor=None, status=JobStatus[NEW, time=1752637240.982448]]
____________________ test_stdin_redirect[batch-test:single] ____________________

execparams = batch-test:single

    def test_stdin_redirect(execparams: ExecutorTestParams) -> None:
        _make_test_dir()
        with TemporaryDirectory(dir=Path.home() / '.psij' / 'test') as td:
            inp = Path(td, 'stdin.txt')
            outp = Path(td, 'stdout.txt')
    
            rnd_str = uuid.uuid4().hex
    
            with open(inp, 'w') as inf:
                inf.write(rnd_str)
    
            job = Job(JobSpec(executable='/bin/cat', stdin_path=inp, stdout_path=outp))
>           ex = _get_executor_instance(execparams, job)

tests/test_executor.py:168: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:47:21 DEBUG New Job: Job[id=19ede465-b49e-410c-938d-b7fa6198e05f, native_id=None, executor=None, status=JobStatus[NEW, time=1752637641.0044656]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=19ede465-b49e-410c-938d-b7fa6198e05f, native_id=None, executor=None, status=JobStatus[NEW, time=1752637641.0044656]]
___________________ test_stdin_redirect[batch-test:multiple] ___________________

execparams = batch-test:multiple

    def test_stdin_redirect(execparams: ExecutorTestParams) -> None:
        _make_test_dir()
        with TemporaryDirectory(dir=Path.home() / '.psij' / 'test') as td:
            inp = Path(td, 'stdin.txt')
            outp = Path(td, 'stdout.txt')
    
            rnd_str = uuid.uuid4().hex
    
            with open(inp, 'w') as inf:
                inf.write(rnd_str)
    
            job = Job(JobSpec(executable='/bin/cat', stdin_path=inp, stdout_path=outp))
>           ex = _get_executor_instance(execparams, job)

tests/test_executor.py:168: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:47:21 DEBUG New Job: Job[id=c5ca21de-9d96-4440-9bf9-a33718d98a22, native_id=None, executor=None, status=JobStatus[NEW, time=1752637641.023488]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=c5ca21de-9d96-4440-9bf9-a33718d98a22, native_id=None, executor=None, status=JobStatus[NEW, time=1752637641.023488]]
__________________ test_stdin_redirect[batch-test:batch-test] __________________

execparams = batch-test:batch-test

    def test_stdin_redirect(execparams: ExecutorTestParams) -> None:
        _make_test_dir()
        with TemporaryDirectory(dir=Path.home() / '.psij' / 'test') as td:
            inp = Path(td, 'stdin.txt')
            outp = Path(td, 'stdout.txt')
    
            rnd_str = uuid.uuid4().hex
    
            with open(inp, 'w') as inf:
                inf.write(rnd_str)
    
            job = Job(JobSpec(executable='/bin/cat', stdin_path=inp, stdout_path=outp))
>           ex = _get_executor_instance(execparams, job)

tests/test_executor.py:168: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:47:21 DEBUG New Job: Job[id=169bbf2f-95fc-4597-b0c7-5daa9965ef53, native_id=None, executor=None, status=JobStatus[NEW, time=1752637641.0387473]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=169bbf2f-95fc-4597-b0c7-5daa9965ef53, native_id=None, executor=None, status=JobStatus[NEW, time=1752637641.0387473]]
_________________________ test_list[batch-test:single] _________________________

execparams = batch-test:single

    def test_list(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/sleep', arguments=['4']))
>       ex = _get_executor_instance(execparams, job)

tests/test_executor.py:181: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:54:08 DEBUG New Job: Job[id=db088992-267f-4772-867a-69ed9f263c35, native_id=None, executor=None, status=JobStatus[NEW, time=1752638048.9604373]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=db088992-267f-4772-867a-69ed9f263c35, native_id=None, executor=None, status=JobStatus[NEW, time=1752638048.9604373]]
________________________ test_list[batch-test:multiple] ________________________

execparams = batch-test:multiple

    def test_list(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/sleep', arguments=['4']))
>       ex = _get_executor_instance(execparams, job)

tests/test_executor.py:181: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:54:08 DEBUG New Job: Job[id=2e6182c5-b9e0-4f77-96e9-431d17b9b514, native_id=None, executor=None, status=JobStatus[NEW, time=1752638048.9778662]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=2e6182c5-b9e0-4f77-96e9-431d17b9b514, native_id=None, executor=None, status=JobStatus[NEW, time=1752638048.9778662]]
_______________________ test_list[batch-test:batch-test] _______________________

execparams = batch-test:batch-test

    def test_list(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/sleep', arguments=['4']))
>       ex = _get_executor_instance(execparams, job)

tests/test_executor.py:181: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-15 23:54:08 DEBUG New Job: Job[id=9066dd81-57e1-4b01-b184-244f0ded585c, native_id=None, executor=None, status=JobStatus[NEW, time=1752638048.9889417]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=9066dd81-57e1-4b01-b184-244f0ded585c, native_id=None, executor=None, status=JobStatus[NEW, time=1752638048.9889417]]
____________________________ test_executor_loading _____________________________

    def test_executor_loading() -> None:
>       je1 = JobExecutor.get_instance('_always_loads')

tests/test_executor_loading.py:5: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = '_always_loads', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "_always_loads". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
___________________________ test_cross_path_loading1 ___________________________

    def test_cross_path_loading1() -> None:
>       JobExecutor.get_instance('p1-tp1')

tests/test_executor_loading.py:16: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'p1-tp1', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "p1-tp1". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
___________________________ test_cross_path_loading2 ___________________________

    def test_cross_path_loading2() -> None:
        try:
            # this should fail since the descriptor and executor are under different paths
            # despite the executor being in the same package as p1-tp1 which should load
>           JobExecutor.get_instance('p2-tp1')

tests/test_executor_loading.py:23: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'p2-tp1', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "p2-tp1". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError

During handling of the above exception, another exception occurred:

    def test_cross_path_loading2() -> None:
        try:
            # this should fail since the descriptor and executor are under different paths
            # despite the executor being in the same package as p1-tp1 which should load
            JobExecutor.get_instance('p2-tp1')
            assert False
        except ValueError as ve:
>           assert 'Unable to load executor' in str(ve)
E           assert 'Unable to load executor' in 'No such executor "p2-tp1". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm'
E            +  where 'No such executor "p2-tp1". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm' = str(ValueError('No such executor "p2-tp1". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm'))

tests/test_executor_loading.py:26: AssertionError
___________________________ test_cross_path_loading3 ___________________________

    def test_cross_path_loading3() -> None:
        try:
            # this should fail since the descriptor and executor are under different paths
>           JobExecutor.get_instance('p2-tp3')

tests/test_executor_loading.py:32: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'p2-tp3', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "p2-tp3". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError

During handling of the above exception, another exception occurred:

    def test_cross_path_loading3() -> None:
        try:
            # this should fail since the descriptor and executor are under different paths
            JobExecutor.get_instance('p2-tp3')
            assert False
        except ValueError as ve:
>           assert 'Unable to load executor' in str(ve)
E           assert 'Unable to load executor' in 'No such executor "p2-tp3". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm'
E            +  where 'No such executor "p2-tp3". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm' = str(ValueError('No such executor "p2-tp3". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm'))

tests/test_executor_loading.py:35: AssertionError
______________________ test_issue_435[batch-test:single] _______________________

execparams = batch-test:single

    def test_issue_435(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/date', launcher=execparams.launcher,
                          attributes=JobAttributes(duration=timedelta(seconds=3700.5))))
>       ex = _get_executor_instance(execparams, job)

tests/test_issue_435.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-16 00:00:48 DEBUG New Job: Job[id=c0a2c8f3-43d0-4849-ac09-7dd5ecff6bc6, native_id=None, executor=None, status=JobStatus[NEW, time=1752638448.3389225]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=c0a2c8f3-43d0-4849-ac09-7dd5ecff6bc6, native_id=None, executor=None, status=JobStatus[NEW, time=1752638448.3389225]]
_____________________ test_issue_435[batch-test:multiple] ______________________

execparams = batch-test:multiple

    def test_issue_435(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/date', launcher=execparams.launcher,
                          attributes=JobAttributes(duration=timedelta(seconds=3700.5))))
>       ex = _get_executor_instance(execparams, job)

tests/test_issue_435.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-16 00:00:48 DEBUG New Job: Job[id=d76d933c-1743-4f2c-ad80-655d607126e1, native_id=None, executor=None, status=JobStatus[NEW, time=1752638448.3490245]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=d76d933c-1743-4f2c-ad80-655d607126e1, native_id=None, executor=None, status=JobStatus[NEW, time=1752638448.3490245]]
____________________ test_issue_435[batch-test:batch-test] _____________________

execparams = batch-test:batch-test

    def test_issue_435(execparams: ExecutorTestParams) -> None:
        job = Job(JobSpec(executable='/bin/date', launcher=execparams.launcher,
                          attributes=JobAttributes(duration=timedelta(seconds=3700.5))))
>       ex = _get_executor_instance(execparams, job)

tests/test_issue_435.py:11: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-16 00:00:48 DEBUG New Job: Job[id=4a1f264a-b41c-42fb-8e7b-8a2a0de00107, native_id=None, executor=None, status=JobStatus[NEW, time=1752638448.3578324]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=4a1f264a-b41c-42fb-8e7b-8a2a0de00107, native_id=None, executor=None, status=JobStatus[NEW, time=1752638448.3578324]]
______________________ test_nodefile[batch-test:multiple] ______________________

execparams = batch-test:multiple

    def test_nodefile(execparams: ExecutorTestParams) -> None:
        if execparams.executor in NOT_TESTED:
            pytest.skip('This test does not work with %s' % execparams.executor)
        if execparams.launcher == 'single':
            pytest.skip('This test does not work with the single launcher')
    
        my_path = os.path.dirname(os.path.realpath(__file__))
    
        N_PROC = 4
        with TemporaryDirectory(dir=Path.home() / '.psij' / 'test') as td:
            outp = Path(td, 'stdout.txt')
            with _deploy(os.path.join(my_path, 'test_nodefile.sh')) as excp:
                spec = JobSpec('/bin/bash', [str(excp), str(N_PROC)],
                               stdout_path=outp)
                job = Job(spec)
                spec.resources = ResourceSpecV1(process_count=N_PROC)
>               ex = _get_executor_instance(execparams, job)

tests/test_nodefile.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-16 00:07:57 DEBUG New Job: Job[id=e8dcbcd7-75d4-4f7a-83b1-7e44d74b7a31, native_id=None, executor=None, status=JobStatus[NEW, time=1752638877.4479403]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=e8dcbcd7-75d4-4f7a-83b1-7e44d74b7a31, native_id=None, executor=None, status=JobStatus[NEW, time=1752638877.4479403]]
_____________________ test_nodefile[batch-test:batch-test] _____________________

execparams = batch-test:batch-test

    def test_nodefile(execparams: ExecutorTestParams) -> None:
        if execparams.executor in NOT_TESTED:
            pytest.skip('This test does not work with %s' % execparams.executor)
        if execparams.launcher == 'single':
            pytest.skip('This test does not work with the single launcher')
    
        my_path = os.path.dirname(os.path.realpath(__file__))
    
        N_PROC = 4
        with TemporaryDirectory(dir=Path.home() / '.psij' / 'test') as td:
            outp = Path(td, 'stdout.txt')
            with _deploy(os.path.join(my_path, 'test_nodefile.sh')) as excp:
                spec = JobSpec('/bin/bash', [str(excp), str(N_PROC)],
                               stdout_path=outp)
                job = Job(spec)
                spec.resources = ResourceSpecV1(process_count=N_PROC)
>               ex = _get_executor_instance(execparams, job)

tests/test_nodefile.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-16 00:07:57 DEBUG New Job: Job[id=8ec37fa1-fe03-4fea-8950-74b0fffc0d2f, native_id=None, executor=None, status=JobStatus[NEW, time=1752638877.4669695]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=8ec37fa1-fe03-4fea-8950-74b0fffc0d2f, native_id=None, executor=None, status=JobStatus[NEW, time=1752638877.4669695]]
______________________ test_nodes[batch-test:batch-test] _______________________

execparams = batch-test:batch-test

    def test_nodes(execparams: ExecutorTestParams) -> None:
        if not _supported(execparams):
            pytest.skip('Unsupported executor/launcher combination')
    
        _make_test_dir()
    
        n_ranks = 4
        n_nodes = 2
        ppn = n_ranks // n_nodes
    
        with TemporaryDirectory(dir=Path.home() / '.psij' / 'test') as td:
            outp = Path(td, 'stdout.txt')
            job = Job(JobSpec(executable='/bin/hostname', stdout_path=outp,
                              launcher=execparams.launcher))
            assert job.spec is not None
            job.spec.resources = ResourceSpecV1(node_count=n_nodes, processes_per_node=ppn)
>           ex = _get_executor_instance(execparams, job)

tests/test_resources.py:78: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-16 00:13:06 DEBUG New Job: Job[id=e26e356a-19ca-4be2-b293-15257f01b582, native_id=None, executor=None, status=JobStatus[NEW, time=1752639186.4866698]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=e26e356a-19ca-4be2-b293-15257f01b582, native_id=None, executor=None, status=JobStatus[NEW, time=1752639186.4866698]]
___________________________ test_user_guide_redirect ___________________________

    def test_user_guide_redirect() -> None:
        ex = JobExecutor.get_instance('local')
        job = Job(
            JobSpec(
                executable='/bin/date',
                stdout_path=Path('/tmp/date.out'),
                stderr_path=Path('/tmp/date.err')
            )
        )
        ex.submit(job)
        status = job.wait()
>       assert_completed(job, status)

tests/user_guide/test_redirect.py:18: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

job = <psij.job.Job object at 0x7f65a4fb3560>
status = <psij.job_status.JobStatus object at 0x7f65a822d610>, attached = False

    def assert_completed(job: Job, status: Optional[JobStatus], attached: bool = False) -> None:
        assert status is not None
        if status.state != JobState.COMPLETED:
            if not attached:
                assert job.spec is not None
                stdout = _read_file(job.spec.stdout_path)
                stderr = _read_file(job.spec.stderr_path)
>               raise AssertionError('Job not completed. Exit code: %s, Status message: %s, '
                                     'stdout: %s, stderr: %s'
                                     % (status.exit_code, status.message, stdout, stderr))
E               AssertionError: Job not completed. Exit code: 1, Status message: None, stdout: Tue Jul 15 22:43:19 EDT 2025
E               , stderr:

tests/_test_tools.py:47: AssertionError
----------------------------- Captured stderr call -----------------------------
2025-07-16 00:14:36 DEBUG New Job: Job[id=9609b7af-70df-47cf-92ca-8e2e5521f72c, native_id=None, executor=None, status=JobStatus[NEW, time=1752639276.0898845]]
2025-07-16 00:14:36 DEBUG Running /bin/bash /home/x-vhayot/.psij/work/f65b111560da52a6d41f52a732be0faf4914eb6d7af2230a8de326017979e684/single_launch.sh 9609b7af-70df-47cf-92ca-8e2e5521f72c '' '' '' /dev/null /tmp/date.out /tmp/date.err /bin/date 
2025-07-16 00:14:36 DEBUG Registering process _ChildProcessEntry[jobid: 9609b7af-70df-47cf-92ca-8e2e5521f72c, pid: 2110707]
2025-07-16 00:14:36 DEBUG Job status change Job[id=9609b7af-70df-47cf-92ca-8e2e5521f72c, native_id=2110707, executor=JobExecutor[local, 0.0.1], status=JobStatus[NEW, time=1752639276.0898845]]: NEW -> QUEUED
2025-07-16 00:14:36 DEBUG Job status change Job[id=9609b7af-70df-47cf-92ca-8e2e5521f72c, native_id=2110707, executor=JobExecutor[local, 0.0.1], status=JobStatus[QUEUED, time=1752639276.096044, meta={'nativeId': 2110707}]]: QUEUED -> ACTIVE
2025-07-16 00:14:36 DEBUG Job status change Job[id=9609b7af-70df-47cf-92ca-8e2e5521f72c, native_id=2110707, executor=JobExecutor[local, 0.0.1], status=JobStatus[ACTIVE, time=1752639276.0962257]]: ACTIVE -> FAILED
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=9609b7af-70df-47cf-92ca-8e2e5521f72c, native_id=None, executor=None, status=JobStatus[NEW, time=1752639276.0898845]]
DEBUG    psij.executors.local:local.py:293 Running /bin/bash /home/x-vhayot/.psij/work/f65b111560da52a6d41f52a732be0faf4914eb6d7af2230a8de326017979e684/single_launch.sh 9609b7af-70df-47cf-92ca-8e2e5521f72c '' '' '' /dev/null /tmp/date.out /tmp/date.err /bin/date 
DEBUG    psij.executors.local:local.py:159 Registering process _ChildProcessEntry[jobid: 9609b7af-70df-47cf-92ca-8e2e5521f72c, pid: 2110707]
DEBUG    psij.job:job.py:107 Job status change Job[id=9609b7af-70df-47cf-92ca-8e2e5521f72c, native_id=2110707, executor=JobExecutor[local, 0.0.1], status=JobStatus[NEW, time=1752639276.0898845]]: NEW -> QUEUED
DEBUG    psij.job:job.py:107 Job status change Job[id=9609b7af-70df-47cf-92ca-8e2e5521f72c, native_id=2110707, executor=JobExecutor[local, 0.0.1], status=JobStatus[QUEUED, time=1752639276.096044, meta={'nativeId': 2110707}]]: QUEUED -> ACTIVE
DEBUG    psij.job:job.py:107 Job status change Job[id=9609b7af-70df-47cf-92ca-8e2e5521f72c, native_id=2110707, executor=JobExecutor[local, 0.0.1], status=JobStatus[ACTIVE, time=1752639276.0962257]]: ACTIVE -> FAILED
_______________ test_user_guide_resourcespec[batch-test:single] ________________

execparams = batch-test:single

    def test_user_guide_resourcespec(execparams: ExecutorTestParams) -> None:
        job = Job(
            JobSpec(
                executable='/bin/date',
                resources=ResourceSpecV1(
                    node_count=2,
                    processes_per_node=4
                )
            )
        )
>       ex = _get_executor_instance(execparams, job)

tests/user_guide/test_resourcespec.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-16 00:14:36 DEBUG New Job: Job[id=1ef92450-ab3c-477c-8463-6440a158a290, native_id=None, executor=None, status=JobStatus[NEW, time=1752639276.1583424]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=1ef92450-ab3c-477c-8463-6440a158a290, native_id=None, executor=None, status=JobStatus[NEW, time=1752639276.1583424]]
______________ test_user_guide_resourcespec[batch-test:multiple] _______________

execparams = batch-test:multiple

    def test_user_guide_resourcespec(execparams: ExecutorTestParams) -> None:
        job = Job(
            JobSpec(
                executable='/bin/date',
                resources=ResourceSpecV1(
                    node_count=2,
                    processes_per_node=4
                )
            )
        )
>       ex = _get_executor_instance(execparams, job)

tests/user_guide/test_resourcespec.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-16 00:14:36 DEBUG New Job: Job[id=a3a2d23e-6805-4a16-90a1-bd9f92f80878, native_id=None, executor=None, status=JobStatus[NEW, time=1752639276.1695275]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=a3a2d23e-6805-4a16-90a1-bd9f92f80878, native_id=None, executor=None, status=JobStatus[NEW, time=1752639276.1695275]]
_____________ test_user_guide_resourcespec[batch-test:batch-test] ______________

execparams = batch-test:batch-test

    def test_user_guide_resourcespec(execparams: ExecutorTestParams) -> None:
        job = Job(
            JobSpec(
                executable='/bin/date',
                resources=ResourceSpecV1(
                    node_count=2,
                    processes_per_node=4
                )
            )
        )
>       ex = _get_executor_instance(execparams, job)

tests/user_guide/test_resourcespec.py:17: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-16 00:14:36 DEBUG New Job: Job[id=8adff1d6-7e82-4985-93f2-698af9bb1548, native_id=None, executor=None, status=JobStatus[NEW, time=1752639276.178282]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=8adff1d6-7e82-4985-93f2-698af9bb1548, native_id=None, executor=None, status=JobStatus[NEW, time=1752639276.178282]]
______________ test_user_guide_scheduling_info[batch-test:single] ______________

execparams = batch-test:single

    def test_user_guide_scheduling_info(execparams: ExecutorTestParams) -> None:
    
        job = Job(
            JobSpec(
                executable="/bin/date",
                attributes=JobAttributes(
                    queue_name=execparams.queue_name,
                    account=execparams.account
                )
            )
        )
    
>       executor = _get_executor_instance(execparams, job)

tests/user_guide/test_scheduling_information.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-16 00:21:16 DEBUG New Job: Job[id=7febdab1-e351-4c99-82e0-fa27b5cf8bcb, native_id=None, executor=None, status=JobStatus[NEW, time=1752639676.1501613]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=7febdab1-e351-4c99-82e0-fa27b5cf8bcb, native_id=None, executor=None, status=JobStatus[NEW, time=1752639676.1501613]]
_____________ test_user_guide_scheduling_info[batch-test:multiple] _____________

execparams = batch-test:multiple

    def test_user_guide_scheduling_info(execparams: ExecutorTestParams) -> None:
    
        job = Job(
            JobSpec(
                executable="/bin/date",
                attributes=JobAttributes(
                    queue_name=execparams.queue_name,
                    account=execparams.account
                )
            )
        )
    
>       executor = _get_executor_instance(execparams, job)

tests/user_guide/test_scheduling_information.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-16 00:21:16 DEBUG New Job: Job[id=b0abf1c6-7d6b-4185-9d0f-e9d3e22570f4, native_id=None, executor=None, status=JobStatus[NEW, time=1752639676.1663218]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=b0abf1c6-7d6b-4185-9d0f-e9d3e22570f4, native_id=None, executor=None, status=JobStatus[NEW, time=1752639676.1663218]]
____________ test_user_guide_scheduling_info[batch-test:batch-test] ____________

execparams = batch-test:batch-test

    def test_user_guide_scheduling_info(execparams: ExecutorTestParams) -> None:
    
        job = Job(
            JobSpec(
                executable="/bin/date",
                attributes=JobAttributes(
                    queue_name=execparams.queue_name,
                    account=execparams.account
                )
            )
        )
    
>       executor = _get_executor_instance(execparams, job)

tests/user_guide/test_scheduling_information.py:20: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tests/_test_tools.py:69: in _get_executor_instance
    return JobExecutor.get_instance(ep.executor, url=ep.url)
src/psij/job_executor.py:238: in get_instance
    selected = _get_plugin_class(name, version_constraint, 'executor', JobExecutor._executors)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

name = 'batch-test', version_constraint = None, type = 'executor'
store = {'cobalt': [<psij.descriptor._VersionEntry object at 0x7f65ad0be090>], 'flux': [<psij.descriptor._VersionEntry object ...iptor._VersionEntry object at 0x7f65acfadf70>], 'lsf': [<psij.descriptor._VersionEntry object at 0x7f65acfaf7d0>], ...}

    def _get_plugin_class(name: str, version_constraint: Optional[str], type: str,
                          store: Dict[str, List[_VersionEntry[T]]]) -> _VersionEntry[T]:
        name = name.lower()
        if name not in store:
>           raise ValueError('No such {} "{}". Available {}s: {}'.format(type, name, type,
                                                                         _get_names(store)))
E           ValueError: No such executor "batch-test". Available executors: cobalt, local, flux, lsf, pbs, pbs_classic, rp, slurm

src/psij/_plugins.py:114: ValueError
----------------------------- Captured stderr call -----------------------------
2025-07-16 00:21:16 DEBUG New Job: Job[id=e376fafd-3989-4df1-8782-cedaa060b07f, native_id=None, executor=None, status=JobStatus[NEW, time=1752639676.1757834]]
------------------------------ Captured log call -------------------------------
DEBUG    psij.job:job.py:51 New Job: Job[id=e376fafd-3989-4df1-8782-cedaa060b07f, native_id=None, executor=None, status=JobStatus[NEW, time=1752639676.1757834]]
=============================== warnings summary ===============================
../../../../../home/x-vhayot/.local/lib/python3.12/site-packages/radical/utils/atfork/stdlib_fixer.py:61
  /home/x-vhayot/.local/lib/python3.12/site-packages/radical/utils/atfork/stdlib_fixer.py:61: UserWarning: Import `radical` modules before `logging` to avoid the application to deadlock on `fork()`!
    warnings.warn(msg)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/getting_started/test_simple_example.py::test_getting_started_single_job[batch-test:single]
FAILED tests/getting_started/test_simple_example.py::test_getting_started_single_job[batch-test:multiple]
FAILED tests/getting_started/test_simple_example.py::test_getting_started_single_job[batch-test:batch-test]
FAILED tests/test_executor.py::test_simple_job[batch-test:single] - ValueErro...
FAILED tests/test_executor.py::test_simple_job[batch-test:multiple] - ValueEr...
FAILED tests/test_executor.py::test_simple_job[batch-test:batch-test] - Value...
FAILED tests/test_executor.py::test_simple_job_redirect[batch-test:single] - ...
FAILED tests/test_executor.py::test_simple_job_redirect[batch-test:multiple]
FAILED tests/test_executor.py::test_simple_job_redirect[batch-test:batch-test]
FAILED tests/test_executor.py::test_stderr_redirect[batch-test:single] - Valu...
FAILED tests/test_executor.py::test_stderr_redirect[batch-test:multiple] - Va...
FAILED tests/test_executor.py::test_stderr_redirect[batch-test:batch-test] - ...
FAILED tests/test_executor.py::test_attach[batch-test:single] - ValueError: N...
FAILED tests/test_executor.py::test_attach[batch-test:multiple] - ValueError:...
FAILED tests/test_executor.py::test_attach[batch-test:batch-test] - ValueErro...
FAILED tests/test_executor.py::test_attach2[batch-test:single] - ValueError: ...
FAILED tests/test_executor.py::test_attach2[batch-test:multiple] - ValueError...
FAILED tests/test_executor.py::test_attach2[batch-test:batch-test] - ValueErr...
FAILED tests/test_executor.py::test_cancel[batch-test:single] - ValueError: N...
FAILED tests/test_executor.py::test_cancel[batch-test:multiple] - ValueError:...
FAILED tests/test_executor.py::test_cancel[batch-test:batch-test] - ValueErro...
FAILED tests/test_executor.py::test_failing_job[batch-test:single] - ValueErr...
FAILED tests/test_executor.py::test_failing_job[batch-test:multiple] - ValueE...
FAILED tests/test_executor.py::test_failing_job[batch-test:batch-test] - Valu...
FAILED tests/test_executor.py::test_missing_executable[batch-test:single] - V...
FAILED tests/test_executor.py::test_missing_executable[batch-test:multiple]
FAILED tests/test_executor.py::test_missing_executable[batch-test:batch-test]
FAILED tests/test_executor.py::test_parallel_jobs[batch-test:single] - ValueE...
FAILED tests/test_executor.py::test_parallel_jobs[batch-test:multiple] - Valu...
FAILED tests/test_executor.py::test_parallel_jobs[batch-test:batch-test] - Va...
FAILED tests/test_executor.py::test_env_var[batch-test:single] - ValueError: ...
FAILED tests/test_executor.py::test_env_var[batch-test:multiple] - ValueError...
FAILED tests/test_executor.py::test_env_var[batch-test:batch-test] - ValueErr...
FAILED tests/test_executor.py::test_stdin_redirect[batch-test:single] - Value...
FAILED tests/test_executor.py::test_stdin_redirect[batch-test:multiple] - Val...
FAILED tests/test_executor.py::test_stdin_redirect[batch-test:batch-test] - V...
FAILED tests/test_executor.py::test_list[batch-test:single] - ValueError: No ...
FAILED tests/test_executor.py::test_list[batch-test:multiple] - ValueError: N...
FAILED tests/test_executor.py::test_list[batch-test:batch-test] - ValueError:...
FAILED tests/test_executor_loading.py::test_executor_loading - ValueError: No...
FAILED tests/test_executor_loading.py::test_cross_path_loading1 - ValueError:...
FAILED tests/test_executor_loading.py::test_cross_path_loading2 - assert 'Una...
FAILED tests/test_executor_loading.py::test_cross_path_loading3 - assert 'Una...
FAILED tests/test_issue_435.py::test_issue_435[batch-test:single] - ValueErro...
FAILED tests/test_issue_435.py::test_issue_435[batch-test:multiple] - ValueEr...
FAILED tests/test_issue_435.py::test_issue_435[batch-test:batch-test] - Value...
FAILED tests/test_nodefile.py::test_nodefile[batch-test:multiple] - ValueErro...
FAILED tests/test_nodefile.py::test_nodefile[batch-test:batch-test] - ValueEr...
FAILED tests/test_resources.py::test_nodes[batch-test:batch-test] - ValueErro...
FAILED tests/user_guide/test_redirect.py::test_user_guide_redirect - Assertio...
FAILED tests/user_guide/test_resourcespec.py::test_user_guide_resourcespec[batch-test:single]
FAILED tests/user_guide/test_resourcespec.py::test_user_guide_resourcespec[batch-test:multiple]
FAILED tests/user_guide/test_resourcespec.py::test_user_guide_resourcespec[batch-test:batch-test]
FAILED tests/user_guide/test_scheduling_information.py::test_user_guide_scheduling_info[batch-test:single]
FAILED tests/user_guide/test_scheduling_information.py::test_user_guide_scheduling_info[batch-test:multiple]
FAILED tests/user_guide/test_scheduling_information.py::test_user_guide_scheduling_info[batch-test:batch-test]
====== 56 failed, 116 passed, 17 skipped, 1 warning in 8947.33s (2:29:07) ======
